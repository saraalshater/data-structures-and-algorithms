/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package staks.queue;

import org.junit.jupiter.api.Test;
import staks.queue.structure.Queues;
import staks.queue.structure.Stack;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
  @Test
  public void pushTest() {
    Stack nodeOne = new Stack();

    nodeOne.push("SARA");

    assertEquals("Stack{top=Node{data='SARA', next=null}}",nodeOne.toString());

  }


  @Test
  public void popTest() {
    Stack nodeOne = new Stack();

    nodeOne.push("SARA");
    nodeOne.push("SAR");
    nodeOne.push("S");
    nodeOne.pop();

    assertEquals("Stack{top=Node{data='SAR', next=Node{data='SARA', next=null}}}",nodeOne.toString());

  }
  //
  @Test
  public void peekTest() {
    Stack nodeOne = new Stack();

    nodeOne.push("SARA");
    nodeOne.push("SAR");
    nodeOne.push("S");
    nodeOne.peek();

    assertEquals("S",nodeOne.peek());

  }
  @Test
  public void checkIsEmpty() {
    Stack nodeOne = new Stack();

    nodeOne.push("SARA");
    nodeOne.push("SAR");
    nodeOne.push("S");
    nodeOne.pop();
    nodeOne.pop();
    nodeOne.pop();

//        assertTrue(true, nodeOne.isEmpty());

  }
  //
//
//
  @Test
  public void enqueueTest() {
    Queues nodeTwo = new Queues();

    nodeTwo.enqueue("SARA");
    nodeTwo.enqueue("SAR");
    nodeTwo.enqueue("S");

    assertEquals("Queues{front=Node{data='SARA', next=Node{data='SAR', next=Node{data='S', next=null}}}, rear=Node{data='S', next=null}}",nodeTwo.toString());


  }
  //
//
  @Test
  public void dequeueTest() {
    Queues nodeTwo = new Queues();

    nodeTwo.enqueue("SARA");
    nodeTwo.enqueue("SAR");
    nodeTwo.enqueue("S");
    nodeTwo.dequeue();

    assertEquals("SAR",nodeTwo.dequeue());


  }
  @Test
  public void peekQueueTest() {
    Queues nodeTwo = new Queues();

    nodeTwo.enqueue("SARA");
    nodeTwo.enqueue("SAR");
    nodeTwo.enqueue("S");
    nodeTwo.peek();

    assertEquals("SARA",nodeTwo.peek());


  }
  @Test
  public void queueIsEmptyTest() {
    Queues nodeTwo = new Queues();

    nodeTwo.enqueue("SARA");
    nodeTwo.enqueue("SAR");
    nodeTwo.enqueue("S");
    nodeTwo.dequeue();
    nodeTwo.dequeue();
    nodeTwo.dequeue();

    assertTrue(nodeTwo.isEmpty());


  }


}
