/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  @Test
  public void addVertex(){

    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.addVertex("Leen");

    assertNotNull(graph.getVertices());
    assertEquals(2,graph.size());
  }

  @Test
  public void addEdge(){

    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.addVertex("Maria");
    graph.addEdge("Sara", "Maria");

    assertEquals("Vertex{label='Maria'}[Vertex{label='Sara'}]Vertex{label='Sara'}[Vertex{label='Maria'}]", graph.printGraph());
  }

  @Test
  public void vertexNeighbors(){

    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.addVertex("Maria");
    graph.addVertex("Alaa");
    graph.addVertex("Leen");
    graph.addEdge("Sara", "Alaa");
    graph.addEdge("Sara", "Maria");
    graph.addEdge("Leen", "Maria");

    assertEquals("[Vertex{label='Alaa'}, Vertex{label='Maria'}]",graph.getNeighbors("Sara").toString());
    assertEquals("[Vertex{label='Maria'}]", graph.getNeighbors("Leen").toString());

  }

  @Test
  public void emptyGraph(){

    Graph graph = new Graph();
    assertEquals(0,graph.size());
    assertEquals("[]", graph.getVertices().toString());
  }

  @Test
  public void removeVertex(){

    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.addVertex("Leen");
    graph.addEdge("Sara", "Leen");
    assertEquals("Vertex{label='Leen'}[Vertex{label='Sara'}]Vertex{label='Sara'}[Vertex{label='Leen'}]",graph.printGraph());
    assertEquals(2, graph.size());

    graph.removeVertex("Sara");
    assertEquals("Vertex{label='Leen'}[]",graph.printGraph());
    assertEquals(1, graph.size());
  }

  @Test
  public void removeEdge(){
    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.addVertex("Leen");
    graph.addEdge("Sara", "Leen");
    assertEquals("Vertex{label='Leen'}[Vertex{label='Sara'}]Vertex{label='Sara'}[Vertex{label='Leen'}]",graph.printGraph());

    graph.removeEdge("Leen", "Sara");
    assertEquals("Vertex{label='Leen'}[]Vertex{label='Sara'}[]", graph.printGraph());
  }

  @Test
  public void oneVertexAndOneEdge(){
    Graph graph = new Graph();

    graph.addVertex("Sara");
    graph.removeEdge("Sara","Sara");

    assertEquals("Vertex{label='Sara'}[]",graph.printGraph());
  }

  //    <<<Code Challenge 36 >>
  @Test
  public void breadthFirst(){

    Graph graph1 = new Graph();

    graph1.addVertex("Sara");
    graph1.addVertex("Tareq");
    graph1.addVertex("Doaa");
    graph1.addVertex("Mohammad");
    graph1.addVertex("Osaid");
    graph1.addVertex("Naim");

    graph1.addEdge("Sara", "Tareq");
    graph1.addEdge("Tareq", "Doaa");
    graph1.addEdge("Tareq", "Mohammad");
    graph1.addEdge("Doaa", "Osaid");
    graph1.addEdge("Doaa", "Naim");
    graph1.addEdge("Doaa", "Mohammad");
    graph1.addEdge("Mohammad", "Naim");
    graph1.addEdge("Osaid", "Naim");


    assertEquals("[Sara, Tareq, Doaa, Mohammad, Osaid, Naim]", graph1.breadthTraverse("Sara").toString());
  }

  @Test
  public void breadthFirstOneVertex(){

    Graph graph1 = new Graph();

    graph1.addVertex("Sara");
    assertEquals("[Sara]",graph1.breadthTraverse( "Sara").toString());
  }

  //    THIS TEST FOR THREE VERTICES AND ONE OF THEM DID NOT CONNECT WITH THE OTHER TWO VERTICES
  @Test
  public void breadthFirstTest(){

    Graph graph1 = new Graph();

    graph1.addVertex("Sara");
    graph1.addVertex("Tareq");
    graph1.addVertex("Doaa");

    graph1.addEdge("Sara", "Tareq");

    assertEquals("[Sara, Tareq]",graph1.breadthTraverse( "Sara").toString());
  }


  //    <<< Code Challenge 37 >>>

  @Test
  public void businessTripTest(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Arendelle");
    assertEquals(150, graph2.businessTrip(graph2, cities1));

    List<String> cities2 = new ArrayList<>();
    cities2.add("Pandora");
    cities2.add("Arendelle");
    cities2.add("Monstroplolis");
    assertEquals(192, graph2.businessTrip(graph2, cities2));

  }

  @Test
  public void businessTripNoEdge(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Monstroplolis");
    assertEquals(0, graph2.businessTrip(graph2, cities1));
  }

  @Test
  public void businessTripAtLeastOnoEdge(){

    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");
    graph2.addVertex("Naboo");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
    graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);


    List<String> cities1 = new ArrayList<>();
    cities1.add("Pandora");
    cities1.add("Naboo");
    cities1.add("Monstroplolis");
    assertEquals(42, graph2.businessTrip(graph2, cities1));
  }
  //    <<< Code Challenge 38 >>>

  @Test
  public void depthFirstTest(){

    Graph graph3 = new Graph();

    graph3.addVertex("A");
    graph3.addVertex("B");
    graph3.addVertex("C");
    graph3.addVertex("D");
    graph3.addVertex("E");
    graph3.addVertex("F");
    graph3.addVertex("G");
    graph3.addVertex("H");

    graph3.addEdge("A", "D");
    graph3.addEdge("A", "B");
    graph3.addEdge("B", "D");
    graph3.addEdge("B", "C");
    graph3.addEdge("C", "G");
    graph3.addEdge("D", "F");
    graph3.addEdge("D", "H");
    graph3.addEdge("D", "E");
    graph3.addEdge("F", "H");

    assertEquals("[A, B, C, G, D, E, H, F]", graph3.depthFirstTraverse("A").toString());
  }

  @Test
  public void depthFirstOneVertex(){

    Graph graph3 = new Graph();

    graph3.addVertex("A");

    assertEquals("[A]", graph3.depthFirstTraverse("A").toString());
  }

  //    THIS TEST FOR THREE VERTICES AND ONE OF THEM DID NOT CONNECT WITH THE OTHER TWO VERTICES

  @Test
  public void depthFirstTest2(){

    Graph graph3 = new Graph();

    graph3.addVertex("A");
    graph3.addVertex("B");
    graph3.addVertex("C");

    graph3.addEdge("A", "B");

    assertEquals("[A, B]", graph3.depthFirstTraverse("A").toString());
  }


}
